NODE JS:

      const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const app = express();
const port = 3000;

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/blog-website', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const postSchema = new mongoose.Schema({
  title: String,
  content: String,
  date: { type: Date, default: Date.now },
});

const Post = mongoose.model('Post', postSchema);

// Middleware
app.use(bodyParser.urlencoded({ extended: true }));
app.set('view engine', 'ejs');
app.use(express.static('public'));

// Routes
app.get('/', async (req, res) => {
  try {
    const posts = await Post.find().sort({ date: -1 });
    res.render('index', { posts });
  } catch (err) {
    res.status(500).send('Error retrieving posts.');
  }
});

app.get('/post/:id', async (req, res) => {
  try {
    const post = await Post.findById(req.params.id);
    if (post) {
      res.render('post', { post });
    } else {
      res.status(404).send('Post not found.');
    }
  } catch (err) {
    res.status(500).send('Error retrieving post.');
  }
});

app.get('/new', (req, res) => {
  res.render('new');
});

app.post('/new', async (req, res) => {
  try {
    const { title, content } = req.body;
    const post = new Post({ title, content });
    await post.save();
    res.redirect('/');
  } catch (err) {
    res.status(500).send('Error saving post.');
  }
});

app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});
